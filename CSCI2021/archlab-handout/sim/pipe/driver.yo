                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f474050000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f574050000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f034040000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f024030000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802f000000   | 	call ncopy		 
  0x029: 8034020000   | 	call check	        # Call checker code
  0x02e: 00           | 	halt                    # should halt with 0xaaaa in %eax
  0x02f:              | StartFun:
                      | # David Schoder
                      | # 4552990
                      | # I modified ncopy to check weather len is odd or even
                      | # If odd, copy once, subtract 1 fron len, and, while len > 0
                      | # then copy two and subtract 2 from len each loop
                      | # 
                      | # If even, copy two and subtract 2 from len each loop until len !> 0
                      | #
                      | # I thought it was pretty clever
                      | #
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | #
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02f: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x031: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x033: a06f         | 	pushl %esi		# Save callee-save regs
  0x035: a03f         | 	pushl %ebx
  0x037: a07f         | 	pushl %edi
  0x039: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03f: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x045: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x04b: 6300         | 	xorl %eax,%eax
  0x04d: 6222         | 	andl %edx,%edx
  0x04f: 7659000000   | 	jg NotDone				# more efficient if it assumes NotDone is taken
  0x054: 7029020000   | 	jmp Done				# because Done is only taken for 1 case
  0x059:              | NotDone:	
  0x059: 2027         | 	rrmovl %edx,%edi		# edi = len
  0x05b: 30f601000000 | 	irmovl $1,%esi			# eax = 1
  0x061: 6267         | 	andl %esi,%edi			# if len odd, do one copy
  0x063: 739f000000   | 	je Check
  0x068: 506300000000 | 	mrmovl (%ebx), %esi		# read val from src...
  0x06e: 406100000000 | 	rmmovl %esi, (%ecx)		# ...and store it to dst
  0x074: 6266         | 	andl %esi, %esi			# val <= 0?
  0x076: 7181000000   | 	jle Bob					# if so, goto Bob:
  0x07b: c0f001000000 | 	iaddl $1, %eax			# count++
  0x081:              | Bob:
  0x081: c0f2ffffffff | 	iaddl $-1, %edx			# len--
  0x087: c0f304000000 | 	iaddl $4, %ebx			# src++
  0x08d: c0f104000000 | 	iaddl $4, %ecx			# dst++
  0x093: 6222         | 	andl %edx,%edx			# len > 0?
  0x095: 769f000000   | 	jg Check				# if so, go to Check
  0x09a: 7029020000   | 	jmp Done				# else done
                      | 
  0x09f:              | Check:	
  0x09f: 30f70a000000 | 	irmovl $10,%edi
  0x0a5: 6172         | 	subl %edi,%edx			# len -10 >= 0?
  0x0a7: 76b3000000   | 	jg TenFix
  0x0ac: 6072         | 	addl %edi, %edx
  0x0ae: 70de010000   | 	jmp EvenFix
                      | 	
  0x0b3:              | TenFix:
  0x0b3: 30f714000000 | 	irmovl $20,%edi			# reduce by one step by checking len and decrimenting count
  0x0b9:              | Ten:
  0x0b9: c0f20a000000 | 	iaddl $10,%edx			# add the 10 subtracted earlier
  0x0bf: 506300000000 | 	mrmovl (%ebx), %esi		# read val from src...
  0x0c5: 406100000000 | 	rmmovl %esi, (%ecx)		# ...and store it to dst
  0x0cb: 6266         | 	andl %esi, %esi			# val <= 0?
  0x0cd: 71d8000000   | 	jle Ne					# if so, goto Next:
  0x0d2: c0f001000000 | 	iaddl $1, %eax			# count++
  0x0d8:              | Ne:
  0x0d8: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x0de: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x0e4: 6266         | 	andl %esi, %esi			# val <= 0?
  0x0e6: 71f1000000   | 	jle Ne2					# if so, goto Npos:	
  0x0eb: c0f001000000 | 	iaddl $1, %eax			# count++
  0x0f1:              | Ne2:
  0x0f1: 506308000000 | 	mrmovl 8(%ebx), %esi	# read val from src...
  0x0f7: 406108000000 | 	rmmovl %esi, 8(%ecx)	# ...and store it to dst
  0x0fd: 6266         | 	andl %esi, %esi			# val <= 0?
  0x0ff: 710a010000   | 	jle Ne3					# if so, goto Next:
  0x104: c0f001000000 | 	iaddl $1, %eax			# count++
  0x10a:              | Ne3:
  0x10a: 50630c000000 | 	mrmovl 12(%ebx), %esi	# read val from src...
  0x110: 40610c000000 | 	rmmovl %esi, 12(%ecx)	# ...and store it to dst
  0x116: 6266         | 	andl %esi, %esi			# val <= 0?
  0x118: 7123010000   | 	jle Ne4					# if so, goto Npos:	
  0x11d: c0f001000000 | 	iaddl $1, %eax			# count++
  0x123:              | Ne4:
  0x123: 506310000000 | 	mrmovl 16(%ebx), %esi	# read val from src...
  0x129: 406110000000 | 	rmmovl %esi, 16(%ecx)	# ...and store it to dst
  0x12f: 6266         | 	andl %esi, %esi			# val <= 0?
  0x131: 713c010000   | 	jle Ne5					# if so, goto Next:
  0x136: c0f001000000 | 	iaddl $1, %eax			# count++
  0x13c:              | Ne5:
  0x13c: 506314000000 | 	mrmovl 20(%ebx), %esi	# read val from src...
  0x142: 406114000000 | 	rmmovl %esi, 20(%ecx)	# ...and store it to dst
  0x148: 6266         | 	andl %esi, %esi			# val <= 0?
  0x14a: 7155010000   | 	jle Ne6					# if so, goto Npos:	
  0x14f: c0f001000000 | 	iaddl $1, %eax			# count++
  0x155:              | Ne6:
  0x155: 506318000000 | 	mrmovl 24(%ebx), %esi	# read val from src...
  0x15b: 406118000000 | 	rmmovl %esi, 24(%ecx)	# ...and store it to dst
  0x161: 6266         | 	andl %esi, %esi			# val <= 0?
  0x163: 716e010000   | 	jle Ne7					# if so, goto Next:
  0x168: c0f001000000 | 	iaddl $1, %eax			# count++
  0x16e:              | Ne7:
  0x16e: 50631c000000 | 	mrmovl 28(%ebx), %esi	# read val from src...
  0x174: 40611c000000 | 	rmmovl %esi, 28(%ecx)	# ...and store it to dst
  0x17a: 6266         | 	andl %esi, %esi			# val <= 0?
  0x17c: 7187010000   | 	jle Ne8					# if so, goto Npos:	
  0x181: c0f001000000 | 	iaddl $1, %eax			# count++
  0x187:              | Ne8:
  0x187: 506320000000 | 	mrmovl 32(%ebx), %esi	# read val from src...
  0x18d: 406120000000 | 	rmmovl %esi, 32(%ecx)	# ...and store it to dst
  0x193: 6266         | 	andl %esi, %esi			# val <= 0?
  0x195: 71a0010000   | 	jle Ne9					# if so, goto Npos:	
  0x19a: c0f001000000 | 	iaddl $1, %eax			# count++
  0x1a0:              | Ne9:
  0x1a0: 506324000000 | 	mrmovl 36(%ebx), %esi	# read val from src...
  0x1a6: 406124000000 | 	rmmovl %esi, 36(%ecx)	# ...and store it to dst
  0x1ac: 6266         | 	andl %esi, %esi			# val <= 0?
  0x1ae: 71b9010000   | 	jle Npos10				# if so, goto Npos:	
  0x1b3: c0f001000000 | 	iaddl $1, %eax			# count++
  0x1b9:              | Npos10:	
  0x1b9: c0f328000000 | 	iaddl $40, %ebx			# src+10
  0x1bf: c0f128000000 | 	iaddl $40, %ecx			# dst+10
  0x1c5: 6172         | 	subl %edi, %edx			# len-10 and len - 10 > 0?
  0x1c7: 76b9000000   | 	jg Ten
  0x1cc: c0f20a000000 | 	iaddl $10,%edx
  0x1d2: 6222         | 	andl %edx,%edx			# len > 0?
  0x1d4: 76de010000   | 	jg EvenFix			
  0x1d9: 7029020000   | 	jmp Done
                      | 
  0x1de:              | EvenFix:
  0x1de: 30f702000000 | 	irmovl $2, %edi
  0x1e4:              | Even:	
  0x1e4: 506300000000 | 	mrmovl (%ebx), %esi		# read val from src...
  0x1ea: 406100000000 | 	rmmovl %esi, (%ecx)		# ...and store it to dst
  0x1f0: 6266         | 	andl %esi, %esi			# val <= 0?
  0x1f2: 71fd010000   | 	jle Next				# if so, goto Next:
  0x1f7: c0f001000000 | 	iaddl $1, %eax			# count++
  0x1fd:              | Next:
  0x1fd: 506304000000 | 	mrmovl 4(%ebx), %esi	# read val from src...
  0x203: 406104000000 | 	rmmovl %esi, 4(%ecx)	# ...and store it to dst
  0x209: 6266         | 	andl %esi, %esi			# val <= 0?
  0x20b: 7116020000   | 	jle Npos				# if so, goto Npos:	
  0x210: c0f001000000 | 	iaddl $1, %eax			# count++
  0x216:              | Npos:	
  0x216: c0f308000000 | 	iaddl $8, %ebx			# src+2
  0x21c: c0f108000000 | 	iaddl $8, %ecx			# dst+2
  0x222: 6172         | 	subl %edi, %edx			# len-2 and len > 0?
  0x224: 76e4010000   | 	jg Even					# if so, goto Loop:
                      | 	
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x229:              | Done:
  0x229: b07f         | 	popl %edi               # Restore callee-save registers
  0x22b: b03f         | 	popl %ebx
  0x22d: b06f         | 	popl %esi
  0x22f: 2054         | 	rrmovl %ebp, %esp
  0x231: b05f         | 	popl %ebp
  0x233: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x234:              | End:
                      | #/* $end ncopy-ys */
  0x234:              | EndFun:
                      | #################################################################### 
                      | # Epilogue code for the correctness testing driver
                      | ####################################################################
                      | 
                      | # This is the correctness checking code.
                      | # It checks:
                      | #   1. %eax has 28.  Set %eax to 0xbbbb if not.
                      | #   2. The total length of the code is less than or equal to 1000.
                      | #      Set %eax to 0xcccc if not.
                      | #   3. The source data was copied to the destination.
                      | #      Set %eax to 0xdddd if not.
                      | #   4. The words just before and just after the destination region
                      | #      were not corrupted.  Set %eax to 0xeeee if not.
                      | # If all checks pass, then sets %eax to 0xaaaa
  0x234:              | check:
  0x234: a05f         | 	pushl %ebp
  0x236: 2045         | 	rrmovl %esp,%ebp
  0x238: a06f         | 	pushl %esi
  0x23a: a03f         | 	pushl %ebx
  0x23c: a07f         | 	pushl %edi
                      | 	# Return value test
  0x23e: 30f21c000000 | 	irmovl $28,%edx
  0x244: 6120         | 	subl %edx,%eax
  0x246: 7356020000   | 	je checkb
  0x24b: 30f0bbbb0000 | 	irmovl $0xbbbb,%eax  # Failed test #1
  0x251: 7018030000   | 	jmp cdone
  0x256:              | checkb:
                      | 	# Code length check
  0x256: 30f034020000 | 	irmovl EndFun,%eax
  0x25c: 30f22f000000 | 	irmovl StartFun,%edx
  0x262: 6120         | 	subl %edx,%eax
  0x264: 30f2e8030000 | 	irmovl $1000,%edx
  0x26a: 6102         | 	subl %eax,%edx
  0x26c: 757c020000   | 	jge checkm
  0x271: 30f0cccc0000 | 	irmovl $0xcccc,%eax  # Failed test #2
  0x277: 7018030000   | 	jmp cdone
  0x27c:              | checkm:
  0x27c: 30f234040000 | 	irmovl dest, %edx # Pointer to next destination location
  0x282: 30f324030000 | 	irmovl src,%ebx   # Pointer to next source location
  0x288: 30f73f000000 | 	irmovl $63,%edi  # Count
  0x28e: 6277         | 	andl %edi,%edi
  0x290: 73ca020000   | 	je checkpre         # Skip check if count = 0
  0x295:              | mcloop:
  0x295: 500200000000 | 	mrmovl (%edx),%eax
  0x29b: 506300000000 | 	mrmovl (%ebx),%esi
  0x2a1: 6160         | 	subl %esi,%eax
  0x2a3: 73b3020000   | 	je  mok
  0x2a8: 30f0dddd0000 | 	irmovl $0xdddd,%eax # Failed test #3
  0x2ae: 7018030000   | 	jmp cdone
  0x2b3:              | mok:
  0x2b3: 30f004000000 | 	irmovl $4,%eax
  0x2b9: 6002         | 	addl %eax,%edx	  # dest ++
  0x2bb: 6003         | 	addl %eax,%ebx    # src++
  0x2bd: 30f001000000 | 	irmovl $1,%eax
  0x2c3: 6107         | 	subl %eax,%edi    # cnt--
  0x2c5: 7695020000   | 	jg mcloop
  0x2ca:              | checkpre:
                      | 	# Check for corruption
  0x2ca: 30f230040000 | 	irmovl Predest,%edx
  0x2d0: 500200000000 | 	mrmovl (%edx), %eax  # Get word before destination
  0x2d6: 30f2fadebc00 | 	irmovl $0xbcdefa, %edx
  0x2dc: 6120         | 	subl %edx,%eax
  0x2de: 73ee020000   | 	je checkpost
  0x2e3: 30f0eeee0000 | 	irmovl $0xeeee,%eax  # Failed test #4
  0x2e9: 7018030000   | 	jmp cdone
  0x2ee:              | checkpost:
                      | 	# Check for corruption
  0x2ee: 30f230050000 | 	irmovl Postdest,%edx
  0x2f4: 500200000000 | 	mrmovl (%edx), %eax  # Get word after destination
  0x2fa: 30f2bcfade00 | 	irmovl $0xdefabc, %edx
  0x300: 6120         | 	subl %edx,%eax
  0x302: 7312030000   | 	je checkok
  0x307: 30f0eeee0000 | 	irmovl $0xeeee,%eax # Failed test #4
  0x30d: 7018030000   | 	jmp cdone
  0x312:              | checkok:
                      | 	# Successful checks
  0x312: 30f0aaaa0000 | 	irmovl $0xaaaa,%eax
  0x318:              | cdone:
  0x318: b07f         | 	popl %edi
  0x31a: b03f         | 	popl %ebx
  0x31c: b06f         | 	popl %esi
  0x31e: 2054         | 	rrmovl %ebp, %esp
  0x320: b05f         | 	popl %ebp
  0x322: 90           | 	ret
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
  0x324:              | 	.align 4
  0x324:              | src:
  0x324: ffffffff     | 	.long -1
  0x328: feffffff     | 	.long -2
  0x32c: fdffffff     | 	.long -3
  0x330: 04000000     | 	.long 4
  0x334: 05000000     | 	.long 5
  0x338: 06000000     | 	.long 6
  0x33c: f9ffffff     | 	.long -7
  0x340: f8ffffff     | 	.long -8
  0x344: 09000000     | 	.long 9
  0x348: f6ffffff     | 	.long -10
  0x34c: 0b000000     | 	.long 11
  0x350: f4ffffff     | 	.long -12
  0x354: 0d000000     | 	.long 13
  0x358: 0e000000     | 	.long 14
  0x35c: 0f000000     | 	.long 15
  0x360: f0ffffff     | 	.long -16
  0x364: efffffff     | 	.long -17
  0x368: 12000000     | 	.long 18
  0x36c: edffffff     | 	.long -19
  0x370: 14000000     | 	.long 20
  0x374: ebffffff     | 	.long -21
  0x378: 16000000     | 	.long 22
  0x37c: 17000000     | 	.long 23
  0x380: 18000000     | 	.long 24
  0x384: e7ffffff     | 	.long -25
  0x388: e6ffffff     | 	.long -26
  0x38c: 1b000000     | 	.long 27
  0x390: 1c000000     | 	.long 28
  0x394: e3ffffff     | 	.long -29
  0x398: e2ffffff     | 	.long -30
  0x39c: e1ffffff     | 	.long -31
  0x3a0: e0ffffff     | 	.long -32
  0x3a4: dfffffff     | 	.long -33
  0x3a8: deffffff     | 	.long -34
  0x3ac: ddffffff     | 	.long -35
  0x3b0: dcffffff     | 	.long -36
  0x3b4: 25000000     | 	.long 37
  0x3b8: daffffff     | 	.long -38
  0x3bc: d9ffffff     | 	.long -39
  0x3c0: d8ffffff     | 	.long -40
  0x3c4: d7ffffff     | 	.long -41
  0x3c8: 2a000000     | 	.long 42
  0x3cc: 2b000000     | 	.long 43
  0x3d0: d4ffffff     | 	.long -44
  0x3d4: 2d000000     | 	.long 45
  0x3d8: 2e000000     | 	.long 46
  0x3dc: 2f000000     | 	.long 47
  0x3e0: 30000000     | 	.long 48
  0x3e4: cfffffff     | 	.long -49
  0x3e8: 32000000     | 	.long 50
  0x3ec: cdffffff     | 	.long -51
  0x3f0: ccffffff     | 	.long -52
  0x3f4: cbffffff     | 	.long -53
  0x3f8: 36000000     | 	.long 54
  0x3fc: 37000000     | 	.long 55
  0x400: c8ffffff     | 	.long -56
  0x404: 39000000     | 	.long 57
  0x408: 3a000000     | 	.long 58
  0x40c: c5ffffff     | 	.long -59
  0x410: c4ffffff     | 	.long -60
  0x414: c3ffffff     | 	.long -61
  0x418: c2ffffff     | 	.long -62
  0x41c: 3f000000     | 	.long 63
  0x420: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
                      | 
  0x430:              | 	.align 16
  0x430:              | Predest:
  0x430: fadebc00     | 	.long 0xbcdefa
  0x434:              | dest:
  0x434: abefcd00     | 	.long 0xcdefab
  0x438: abefcd00     | 	.long 0xcdefab
  0x43c: abefcd00     | 	.long 0xcdefab
  0x440: abefcd00     | 	.long 0xcdefab
  0x444: abefcd00     | 	.long 0xcdefab
  0x448: abefcd00     | 	.long 0xcdefab
  0x44c: abefcd00     | 	.long 0xcdefab
  0x450: abefcd00     | 	.long 0xcdefab
  0x454: abefcd00     | 	.long 0xcdefab
  0x458: abefcd00     | 	.long 0xcdefab
  0x45c: abefcd00     | 	.long 0xcdefab
  0x460: abefcd00     | 	.long 0xcdefab
  0x464: abefcd00     | 	.long 0xcdefab
  0x468: abefcd00     | 	.long 0xcdefab
  0x46c: abefcd00     | 	.long 0xcdefab
  0x470: abefcd00     | 	.long 0xcdefab
  0x474: abefcd00     | 	.long 0xcdefab
  0x478: abefcd00     | 	.long 0xcdefab
  0x47c: abefcd00     | 	.long 0xcdefab
  0x480: abefcd00     | 	.long 0xcdefab
  0x484: abefcd00     | 	.long 0xcdefab
  0x488: abefcd00     | 	.long 0xcdefab
  0x48c: abefcd00     | 	.long 0xcdefab
  0x490: abefcd00     | 	.long 0xcdefab
  0x494: abefcd00     | 	.long 0xcdefab
  0x498: abefcd00     | 	.long 0xcdefab
  0x49c: abefcd00     | 	.long 0xcdefab
  0x4a0: abefcd00     | 	.long 0xcdefab
  0x4a4: abefcd00     | 	.long 0xcdefab
  0x4a8: abefcd00     | 	.long 0xcdefab
  0x4ac: abefcd00     | 	.long 0xcdefab
  0x4b0: abefcd00     | 	.long 0xcdefab
  0x4b4: abefcd00     | 	.long 0xcdefab
  0x4b8: abefcd00     | 	.long 0xcdefab
  0x4bc: abefcd00     | 	.long 0xcdefab
  0x4c0: abefcd00     | 	.long 0xcdefab
  0x4c4: abefcd00     | 	.long 0xcdefab
  0x4c8: abefcd00     | 	.long 0xcdefab
  0x4cc: abefcd00     | 	.long 0xcdefab
  0x4d0: abefcd00     | 	.long 0xcdefab
  0x4d4: abefcd00     | 	.long 0xcdefab
  0x4d8: abefcd00     | 	.long 0xcdefab
  0x4dc: abefcd00     | 	.long 0xcdefab
  0x4e0: abefcd00     | 	.long 0xcdefab
  0x4e4: abefcd00     | 	.long 0xcdefab
  0x4e8: abefcd00     | 	.long 0xcdefab
  0x4ec: abefcd00     | 	.long 0xcdefab
  0x4f0: abefcd00     | 	.long 0xcdefab
  0x4f4: abefcd00     | 	.long 0xcdefab
  0x4f8: abefcd00     | 	.long 0xcdefab
  0x4fc: abefcd00     | 	.long 0xcdefab
  0x500: abefcd00     | 	.long 0xcdefab
  0x504: abefcd00     | 	.long 0xcdefab
  0x508: abefcd00     | 	.long 0xcdefab
  0x50c: abefcd00     | 	.long 0xcdefab
  0x510: abefcd00     | 	.long 0xcdefab
  0x514: abefcd00     | 	.long 0xcdefab
  0x518: abefcd00     | 	.long 0xcdefab
  0x51c: abefcd00     | 	.long 0xcdefab
  0x520: abefcd00     | 	.long 0xcdefab
  0x524: abefcd00     | 	.long 0xcdefab
  0x528: abefcd00     | 	.long 0xcdefab
  0x52c: abefcd00     | 	.long 0xcdefab
  0x530:              | Postdest:
  0x530: bcfade00     | 	.long 0xdefabc
                      | 
  0x534:              | .align 4
                      | # Run time stack
  0x534: 00000000     | 	.long 0
  0x538: 00000000     | 	.long 0
  0x53c: 00000000     | 	.long 0
  0x540: 00000000     | 	.long 0
  0x544: 00000000     | 	.long 0
  0x548: 00000000     | 	.long 0
  0x54c: 00000000     | 	.long 0
  0x550: 00000000     | 	.long 0
  0x554: 00000000     | 	.long 0
  0x558: 00000000     | 	.long 0
  0x55c: 00000000     | 	.long 0
  0x560: 00000000     | 	.long 0
  0x564: 00000000     | 	.long 0
  0x568: 00000000     | 	.long 0
  0x56c: 00000000     | 	.long 0
  0x570: 00000000     | 	.long 0
                      | 
  0x574:              | Stack:
