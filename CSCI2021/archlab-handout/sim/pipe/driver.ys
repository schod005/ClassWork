#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovl Stack, %esp  	# Set up stack pointer
	irmovl Stack, %ebp  	# Set up base pointer

	# Set up arguments for copy function and then invoke it
	irmovl $63, %eax		# src and dst have 63 elements
	pushl %eax
	irmovl dest, %eax	# dst array
	pushl %eax
	irmovl src, %eax	# src array
	pushl %eax
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %eax
StartFun:
# David Schoder
# 4552990
# I modified ncopy to check weather len is odd or even
# If odd, copy once, subtract 1 fron len, and, while len > 0
# then copy two and subtract 2 from len each loop
# 
# If even, copy two and subtract 2 from len each loop until len !> 0
#
# I thought it was pretty clever
#
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax
	andl %edx,%edx
	jg NotDone				# more efficient if it assumes NotDone is taken
	jmp Done				# because Done is only taken for 1 case
NotDone:	
	rrmovl %edx,%edi		# edi = len
	irmovl $1,%esi			# eax = 1
	andl %esi,%edi			# if len odd, do one copy
	je Check
	mrmovl (%ebx), %esi		# read val from src...
	rmmovl %esi, (%ecx)		# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Bob					# if so, goto Bob:
	iaddl $1, %eax			# count++
Bob:
	iaddl $-1, %edx			# len--
	iaddl $4, %ebx			# src++
	iaddl $4, %ecx			# dst++
	andl %edx,%edx			# len > 0?
	jg Check				# if so, go to Check
	jmp Done				# else done

Check:	
	irmovl $10,%edi
	subl %edi,%edx			# len -10 >= 0?
	jg TenFix
	addl %edi, %edx
	jmp EvenFix
	
TenFix:
	irmovl $20,%edi			# reduce by one step by checking len and decrimenting count
Ten:
	iaddl $10,%edx			# add the 10 subtracted earlier
	mrmovl (%ebx), %esi		# read val from src...
	rmmovl %esi, (%ecx)		# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne					# if so, goto Next:
	iaddl $1, %eax			# count++
Ne:
	mrmovl 4(%ebx), %esi	# read val from src...
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne2					# if so, goto Npos:	
	iaddl $1, %eax			# count++
Ne2:
	mrmovl 8(%ebx), %esi	# read val from src...
	rmmovl %esi, 8(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne3					# if so, goto Next:
	iaddl $1, %eax			# count++
Ne3:
	mrmovl 12(%ebx), %esi	# read val from src...
	rmmovl %esi, 12(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne4					# if so, goto Npos:	
	iaddl $1, %eax			# count++
Ne4:
	mrmovl 16(%ebx), %esi	# read val from src...
	rmmovl %esi, 16(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne5					# if so, goto Next:
	iaddl $1, %eax			# count++
Ne5:
	mrmovl 20(%ebx), %esi	# read val from src...
	rmmovl %esi, 20(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne6					# if so, goto Npos:	
	iaddl $1, %eax			# count++
Ne6:
	mrmovl 24(%ebx), %esi	# read val from src...
	rmmovl %esi, 24(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne7					# if so, goto Next:
	iaddl $1, %eax			# count++
Ne7:
	mrmovl 28(%ebx), %esi	# read val from src...
	rmmovl %esi, 28(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne8					# if so, goto Npos:	
	iaddl $1, %eax			# count++
Ne8:
	mrmovl 32(%ebx), %esi	# read val from src...
	rmmovl %esi, 32(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Ne9					# if so, goto Npos:	
	iaddl $1, %eax			# count++
Ne9:
	mrmovl 36(%ebx), %esi	# read val from src...
	rmmovl %esi, 36(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Npos10				# if so, goto Npos:	
	iaddl $1, %eax			# count++
Npos10:	
	iaddl $40, %ebx			# src+10
	iaddl $40, %ecx			# dst+10
	subl %edi, %edx			# len-10 and len - 10 > 0?
	jg Ten
	iaddl $10,%edx
	andl %edx,%edx			# len > 0?
	jg EvenFix			
	jmp Done

EvenFix:
	irmovl $2, %edi
Even:	
	mrmovl (%ebx), %esi		# read val from src...
	rmmovl %esi, (%ecx)		# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Next				# if so, goto Next:
	iaddl $1, %eax			# count++
Next:
	mrmovl 4(%ebx), %esi	# read val from src...
	rmmovl %esi, 4(%ecx)	# ...and store it to dst
	andl %esi, %esi			# val <= 0?
	jle Npos				# if so, goto Npos:	
	iaddl $1, %eax			# count++
Npos:	
	iaddl $8, %ebx			# src+2
	iaddl $8, %ecx			# dst+2
	subl %edi, %edx			# len-2 and len > 0?
	jg Even					# if so, goto Loop:
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %eax has 28.  Set %eax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %eax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %eax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %eax to 0xeeee if not.
# If all checks pass, then sets %eax to 0xaaaa
check:
	pushl %ebp
	rrmovl %esp,%ebp
	pushl %esi
	pushl %ebx
	pushl %edi
	# Return value test
	irmovl $28,%edx
	subl %edx,%eax
	je checkb
	irmovl $0xbbbb,%eax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovl EndFun,%eax
	irmovl StartFun,%edx
	subl %edx,%eax
	irmovl $1000,%edx
	subl %eax,%edx
	jge checkm
	irmovl $0xcccc,%eax  # Failed test #2
	jmp cdone
checkm:
	irmovl dest, %edx # Pointer to next destination location
	irmovl src,%ebx   # Pointer to next source location
	irmovl $63,%edi  # Count
	andl %edi,%edi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovl (%edx),%eax
	mrmovl (%ebx),%esi
	subl %esi,%eax
	je  mok
	irmovl $0xdddd,%eax # Failed test #3
	jmp cdone
mok:
	irmovl $4,%eax
	addl %eax,%edx	  # dest ++
	addl %eax,%ebx    # src++
	irmovl $1,%eax
	subl %eax,%edi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovl Predest,%edx
	mrmovl (%edx), %eax  # Get word before destination
	irmovl $0xbcdefa, %edx
	subl %edx,%eax
	je checkpost
	irmovl $0xeeee,%eax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovl Postdest,%edx
	mrmovl (%edx), %eax  # Get word after destination
	irmovl $0xdefabc, %edx
	subl %edx,%eax
	je checkok
	irmovl $0xeeee,%eax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovl $0xaaaa,%eax
cdone:
	popl %edi
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret

###############################
# Source and destination blocks 
###############################
	.align 4
src:
	.long -1
	.long -2
	.long -3
	.long 4
	.long 5
	.long 6
	.long -7
	.long -8
	.long 9
	.long -10
	.long 11
	.long -12
	.long 13
	.long 14
	.long 15
	.long -16
	.long -17
	.long 18
	.long -19
	.long 20
	.long -21
	.long 22
	.long 23
	.long 24
	.long -25
	.long -26
	.long 27
	.long 28
	.long -29
	.long -30
	.long -31
	.long -32
	.long -33
	.long -34
	.long -35
	.long -36
	.long 37
	.long -38
	.long -39
	.long -40
	.long -41
	.long 42
	.long 43
	.long -44
	.long 45
	.long 46
	.long 47
	.long 48
	.long -49
	.long 50
	.long -51
	.long -52
	.long -53
	.long 54
	.long 55
	.long -56
	.long 57
	.long 58
	.long -59
	.long -60
	.long -61
	.long -62
	.long 63
	.long 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.long 0xbcdefa
dest:
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
	.long 0xcdefab
Postdest:
	.long 0xdefabc

.align 4
# Run time stack
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0
	.long 0

Stack:
