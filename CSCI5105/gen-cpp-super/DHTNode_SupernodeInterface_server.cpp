// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "DHTNode_SupernodeInterface.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/server/TThreadedServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <pthread.h>
#include <iostream>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

pthread_mutex_t busyMtx = PTHREAD_MUTEX_INITIALIZER;

#define DHT_SIZE 32

class DHTNode_SupernodeInterfaceHandler : virtual public DHTNode_SupernodeInterfaceIf {
 private:
   std::vector<NodeInfo> DHTNodes;

   bool contains(unsigned int x) {
     for(unsigned int i = 0; i < DHTNodes.size(); i++) {
       if(x == DHTNodes[i].ID)
          return true;
     }

     return false;
   }

 public:
  DHTNode_SupernodeInterfaceHandler() {
    // Your initialization goes here
    srand(time(NULL));
  }

  void Join(std::vector<NodeInfo> & _return, const IPPort& ipport) {
    NodeInfo newNode;
    if(!pthread_mutex_trylock(&busyMtx) && DHTNodes.size() < DHT_SIZE) { //Use lock to only allow 1 node to join DHT at a time
      newNode.network_info = ipport;
      while(contains((newNode.ID = rand()%DHT_SIZE))); //Assign ID which hasn't been assigned yet
      DHTNodes.push_back(newNode);
      _return = DHTNodes;
    } else {
      std::vector<NodeInfo> empty;
      _return = empty; //If the vector is empty, then it's logically equivalent to 'NACK'
    }

    printf("Join\n");
  }

  void PostJoin(const IPPort& ipport) {
    //Unlock busyMtx after node has confirmed successful join
    pthread_mutex_unlock(&busyMtx);

    printf("PostJoin\n");
  }

  void getNode(NodeInfo& _return) {
    //Pick a random index between 0 and DHTNodes.size() - 1
    _return = (DHTNodes.size() > 1 ? DHTNodes[rand()%(DHTNodes.size())] : DHTNodes[0]);

    printf("getNode\n");
  }

  void getNodeList(std::vector<NodeInfo> & _return) {
    _return = DHTNodes;
    printf("getNodeList\n");
  }


};

int main(int argc, char **argv) {
  if(argc != 2)
  {
    std::cout << "Usage: ./supernode <port>" << std::endl;
    return 0;
  }

  int port = atoi(argv[1]);

  shared_ptr<DHTNode_SupernodeInterfaceHandler> handler(new DHTNode_SupernodeInterfaceHandler());
  shared_ptr<TProcessor> processor(new DHTNode_SupernodeInterfaceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TThreadedServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}
