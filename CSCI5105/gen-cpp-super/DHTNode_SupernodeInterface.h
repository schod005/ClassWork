/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DHTNode_SupernodeInterface_H
#define DHTNode_SupernodeInterface_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "DHTNode_SupernodeInterface_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DHTNode_SupernodeInterfaceIf {
 public:
  virtual ~DHTNode_SupernodeInterfaceIf() {}
  virtual void Join(std::vector<NodeInfo> & _return, const IPPort& ipport) = 0;
  virtual void PostJoin(const IPPort& ipport) = 0;
  virtual void getNode(NodeInfo& _return) = 0;
  virtual void getNodeList(std::vector<NodeInfo> & _return) = 0;
};

class DHTNode_SupernodeInterfaceIfFactory {
 public:
  typedef DHTNode_SupernodeInterfaceIf Handler;

  virtual ~DHTNode_SupernodeInterfaceIfFactory() {}

  virtual DHTNode_SupernodeInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DHTNode_SupernodeInterfaceIf* /* handler */) = 0;
};

class DHTNode_SupernodeInterfaceIfSingletonFactory : virtual public DHTNode_SupernodeInterfaceIfFactory {
 public:
  DHTNode_SupernodeInterfaceIfSingletonFactory(const boost::shared_ptr<DHTNode_SupernodeInterfaceIf>& iface) : iface_(iface) {}
  virtual ~DHTNode_SupernodeInterfaceIfSingletonFactory() {}

  virtual DHTNode_SupernodeInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DHTNode_SupernodeInterfaceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DHTNode_SupernodeInterfaceIf> iface_;
};

class DHTNode_SupernodeInterfaceNull : virtual public DHTNode_SupernodeInterfaceIf {
 public:
  virtual ~DHTNode_SupernodeInterfaceNull() {}
  void Join(std::vector<NodeInfo> & /* _return */, const IPPort& /* ipport */) {
    return;
  }
  void PostJoin(const IPPort& /* ipport */) {
    return;
  }
  void getNode(NodeInfo& /* _return */) {
    return;
  }
  void getNodeList(std::vector<NodeInfo> & /* _return */) {
    return;
  }
};

typedef struct _DHTNode_SupernodeInterface_Join_args__isset {
  _DHTNode_SupernodeInterface_Join_args__isset() : ipport(false) {}
  bool ipport :1;
} _DHTNode_SupernodeInterface_Join_args__isset;

class DHTNode_SupernodeInterface_Join_args {
 public:

  DHTNode_SupernodeInterface_Join_args(const DHTNode_SupernodeInterface_Join_args&);
  DHTNode_SupernodeInterface_Join_args& operator=(const DHTNode_SupernodeInterface_Join_args&);
  DHTNode_SupernodeInterface_Join_args() {
  }

  virtual ~DHTNode_SupernodeInterface_Join_args() throw();
  IPPort ipport;

  _DHTNode_SupernodeInterface_Join_args__isset __isset;

  void __set_ipport(const IPPort& val);

  bool operator == (const DHTNode_SupernodeInterface_Join_args & rhs) const
  {
    if (!(ipport == rhs.ipport))
      return false;
    return true;
  }
  bool operator != (const DHTNode_SupernodeInterface_Join_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_SupernodeInterface_Join_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_SupernodeInterface_Join_pargs {
 public:


  virtual ~DHTNode_SupernodeInterface_Join_pargs() throw();
  const IPPort* ipport;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_SupernodeInterface_Join_result__isset {
  _DHTNode_SupernodeInterface_Join_result__isset() : success(false) {}
  bool success :1;
} _DHTNode_SupernodeInterface_Join_result__isset;

class DHTNode_SupernodeInterface_Join_result {
 public:

  DHTNode_SupernodeInterface_Join_result(const DHTNode_SupernodeInterface_Join_result&);
  DHTNode_SupernodeInterface_Join_result& operator=(const DHTNode_SupernodeInterface_Join_result&);
  DHTNode_SupernodeInterface_Join_result() {
  }

  virtual ~DHTNode_SupernodeInterface_Join_result() throw();
  std::vector<NodeInfo>  success;

  _DHTNode_SupernodeInterface_Join_result__isset __isset;

  void __set_success(const std::vector<NodeInfo> & val);

  bool operator == (const DHTNode_SupernodeInterface_Join_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DHTNode_SupernodeInterface_Join_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_SupernodeInterface_Join_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_SupernodeInterface_Join_presult__isset {
  _DHTNode_SupernodeInterface_Join_presult__isset() : success(false) {}
  bool success :1;
} _DHTNode_SupernodeInterface_Join_presult__isset;

class DHTNode_SupernodeInterface_Join_presult {
 public:


  virtual ~DHTNode_SupernodeInterface_Join_presult() throw();
  std::vector<NodeInfo> * success;

  _DHTNode_SupernodeInterface_Join_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DHTNode_SupernodeInterface_PostJoin_args__isset {
  _DHTNode_SupernodeInterface_PostJoin_args__isset() : ipport(false) {}
  bool ipport :1;
} _DHTNode_SupernodeInterface_PostJoin_args__isset;

class DHTNode_SupernodeInterface_PostJoin_args {
 public:

  DHTNode_SupernodeInterface_PostJoin_args(const DHTNode_SupernodeInterface_PostJoin_args&);
  DHTNode_SupernodeInterface_PostJoin_args& operator=(const DHTNode_SupernodeInterface_PostJoin_args&);
  DHTNode_SupernodeInterface_PostJoin_args() {
  }

  virtual ~DHTNode_SupernodeInterface_PostJoin_args() throw();
  IPPort ipport;

  _DHTNode_SupernodeInterface_PostJoin_args__isset __isset;

  void __set_ipport(const IPPort& val);

  bool operator == (const DHTNode_SupernodeInterface_PostJoin_args & rhs) const
  {
    if (!(ipport == rhs.ipport))
      return false;
    return true;
  }
  bool operator != (const DHTNode_SupernodeInterface_PostJoin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_SupernodeInterface_PostJoin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_SupernodeInterface_PostJoin_pargs {
 public:


  virtual ~DHTNode_SupernodeInterface_PostJoin_pargs() throw();
  const IPPort* ipport;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_SupernodeInterface_PostJoin_result {
 public:

  DHTNode_SupernodeInterface_PostJoin_result(const DHTNode_SupernodeInterface_PostJoin_result&);
  DHTNode_SupernodeInterface_PostJoin_result& operator=(const DHTNode_SupernodeInterface_PostJoin_result&);
  DHTNode_SupernodeInterface_PostJoin_result() {
  }

  virtual ~DHTNode_SupernodeInterface_PostJoin_result() throw();

  bool operator == (const DHTNode_SupernodeInterface_PostJoin_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DHTNode_SupernodeInterface_PostJoin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_SupernodeInterface_PostJoin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_SupernodeInterface_PostJoin_presult {
 public:


  virtual ~DHTNode_SupernodeInterface_PostJoin_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DHTNode_SupernodeInterface_getNode_args {
 public:

  DHTNode_SupernodeInterface_getNode_args(const DHTNode_SupernodeInterface_getNode_args&);
  DHTNode_SupernodeInterface_getNode_args& operator=(const DHTNode_SupernodeInterface_getNode_args&);
  DHTNode_SupernodeInterface_getNode_args() {
  }

  virtual ~DHTNode_SupernodeInterface_getNode_args() throw();

  bool operator == (const DHTNode_SupernodeInterface_getNode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DHTNode_SupernodeInterface_getNode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_SupernodeInterface_getNode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_SupernodeInterface_getNode_pargs {
 public:


  virtual ~DHTNode_SupernodeInterface_getNode_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_SupernodeInterface_getNode_result__isset {
  _DHTNode_SupernodeInterface_getNode_result__isset() : success(false) {}
  bool success :1;
} _DHTNode_SupernodeInterface_getNode_result__isset;

class DHTNode_SupernodeInterface_getNode_result {
 public:

  DHTNode_SupernodeInterface_getNode_result(const DHTNode_SupernodeInterface_getNode_result&);
  DHTNode_SupernodeInterface_getNode_result& operator=(const DHTNode_SupernodeInterface_getNode_result&);
  DHTNode_SupernodeInterface_getNode_result() {
  }

  virtual ~DHTNode_SupernodeInterface_getNode_result() throw();
  NodeInfo success;

  _DHTNode_SupernodeInterface_getNode_result__isset __isset;

  void __set_success(const NodeInfo& val);

  bool operator == (const DHTNode_SupernodeInterface_getNode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DHTNode_SupernodeInterface_getNode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_SupernodeInterface_getNode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_SupernodeInterface_getNode_presult__isset {
  _DHTNode_SupernodeInterface_getNode_presult__isset() : success(false) {}
  bool success :1;
} _DHTNode_SupernodeInterface_getNode_presult__isset;

class DHTNode_SupernodeInterface_getNode_presult {
 public:


  virtual ~DHTNode_SupernodeInterface_getNode_presult() throw();
  NodeInfo* success;

  _DHTNode_SupernodeInterface_getNode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DHTNode_SupernodeInterface_getNodeList_args {
 public:

  DHTNode_SupernodeInterface_getNodeList_args(const DHTNode_SupernodeInterface_getNodeList_args&);
  DHTNode_SupernodeInterface_getNodeList_args& operator=(const DHTNode_SupernodeInterface_getNodeList_args&);
  DHTNode_SupernodeInterface_getNodeList_args() {
  }

  virtual ~DHTNode_SupernodeInterface_getNodeList_args() throw();

  bool operator == (const DHTNode_SupernodeInterface_getNodeList_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DHTNode_SupernodeInterface_getNodeList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_SupernodeInterface_getNodeList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_SupernodeInterface_getNodeList_pargs {
 public:


  virtual ~DHTNode_SupernodeInterface_getNodeList_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_SupernodeInterface_getNodeList_result__isset {
  _DHTNode_SupernodeInterface_getNodeList_result__isset() : success(false) {}
  bool success :1;
} _DHTNode_SupernodeInterface_getNodeList_result__isset;

class DHTNode_SupernodeInterface_getNodeList_result {
 public:

  DHTNode_SupernodeInterface_getNodeList_result(const DHTNode_SupernodeInterface_getNodeList_result&);
  DHTNode_SupernodeInterface_getNodeList_result& operator=(const DHTNode_SupernodeInterface_getNodeList_result&);
  DHTNode_SupernodeInterface_getNodeList_result() {
  }

  virtual ~DHTNode_SupernodeInterface_getNodeList_result() throw();
  std::vector<NodeInfo>  success;

  _DHTNode_SupernodeInterface_getNodeList_result__isset __isset;

  void __set_success(const std::vector<NodeInfo> & val);

  bool operator == (const DHTNode_SupernodeInterface_getNodeList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DHTNode_SupernodeInterface_getNodeList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_SupernodeInterface_getNodeList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_SupernodeInterface_getNodeList_presult__isset {
  _DHTNode_SupernodeInterface_getNodeList_presult__isset() : success(false) {}
  bool success :1;
} _DHTNode_SupernodeInterface_getNodeList_presult__isset;

class DHTNode_SupernodeInterface_getNodeList_presult {
 public:


  virtual ~DHTNode_SupernodeInterface_getNodeList_presult() throw();
  std::vector<NodeInfo> * success;

  _DHTNode_SupernodeInterface_getNodeList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DHTNode_SupernodeInterfaceClient : virtual public DHTNode_SupernodeInterfaceIf {
 public:
  DHTNode_SupernodeInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DHTNode_SupernodeInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Join(std::vector<NodeInfo> & _return, const IPPort& ipport);
  void send_Join(const IPPort& ipport);
  void recv_Join(std::vector<NodeInfo> & _return);
  void PostJoin(const IPPort& ipport);
  void send_PostJoin(const IPPort& ipport);
  void recv_PostJoin();
  void getNode(NodeInfo& _return);
  void send_getNode();
  void recv_getNode(NodeInfo& _return);
  void getNodeList(std::vector<NodeInfo> & _return);
  void send_getNodeList();
  void recv_getNodeList(std::vector<NodeInfo> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DHTNode_SupernodeInterfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DHTNode_SupernodeInterfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DHTNode_SupernodeInterfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Join(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_PostJoin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNodeList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DHTNode_SupernodeInterfaceProcessor(boost::shared_ptr<DHTNode_SupernodeInterfaceIf> iface) :
    iface_(iface) {
    processMap_["Join"] = &DHTNode_SupernodeInterfaceProcessor::process_Join;
    processMap_["PostJoin"] = &DHTNode_SupernodeInterfaceProcessor::process_PostJoin;
    processMap_["getNode"] = &DHTNode_SupernodeInterfaceProcessor::process_getNode;
    processMap_["getNodeList"] = &DHTNode_SupernodeInterfaceProcessor::process_getNodeList;
  }

  virtual ~DHTNode_SupernodeInterfaceProcessor() {}
};

class DHTNode_SupernodeInterfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DHTNode_SupernodeInterfaceProcessorFactory(const ::boost::shared_ptr< DHTNode_SupernodeInterfaceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DHTNode_SupernodeInterfaceIfFactory > handlerFactory_;
};

class DHTNode_SupernodeInterfaceMultiface : virtual public DHTNode_SupernodeInterfaceIf {
 public:
  DHTNode_SupernodeInterfaceMultiface(std::vector<boost::shared_ptr<DHTNode_SupernodeInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DHTNode_SupernodeInterfaceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DHTNode_SupernodeInterfaceIf> > ifaces_;
  DHTNode_SupernodeInterfaceMultiface() {}
  void add(boost::shared_ptr<DHTNode_SupernodeInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Join(std::vector<NodeInfo> & _return, const IPPort& ipport) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Join(_return, ipport);
    }
    ifaces_[i]->Join(_return, ipport);
    return;
  }

  void PostJoin(const IPPort& ipport) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->PostJoin(ipport);
    }
    ifaces_[i]->PostJoin(ipport);
  }

  void getNode(NodeInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNode(_return);
    }
    ifaces_[i]->getNode(_return);
    return;
  }

  void getNodeList(std::vector<NodeInfo> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNodeList(_return);
    }
    ifaces_[i]->getNodeList(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DHTNode_SupernodeInterfaceConcurrentClient : virtual public DHTNode_SupernodeInterfaceIf {
 public:
  DHTNode_SupernodeInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DHTNode_SupernodeInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Join(std::vector<NodeInfo> & _return, const IPPort& ipport);
  int32_t send_Join(const IPPort& ipport);
  void recv_Join(std::vector<NodeInfo> & _return, const int32_t seqid);
  void PostJoin(const IPPort& ipport);
  int32_t send_PostJoin(const IPPort& ipport);
  void recv_PostJoin(const int32_t seqid);
  void getNode(NodeInfo& _return);
  int32_t send_getNode();
  void recv_getNode(NodeInfo& _return, const int32_t seqid);
  void getNodeList(std::vector<NodeInfo> & _return);
  int32_t send_getNodeList();
  void recv_getNodeList(std::vector<NodeInfo> & _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
