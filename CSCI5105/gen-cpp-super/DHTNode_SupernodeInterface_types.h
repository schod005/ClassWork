/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DHTNode_SupernodeInterface_TYPES_H
#define DHTNode_SupernodeInterface_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class IPPort;

class NodeInfo;

typedef struct _IPPort__isset {
  _IPPort__isset() : port(false), ipAddress(false) {}
  bool port :1;
  bool ipAddress :1;
} _IPPort__isset;

class IPPort {
 public:

  IPPort(const IPPort&);
  IPPort& operator=(const IPPort&);
  IPPort() : port(0), ipAddress() {
  }

  virtual ~IPPort() throw();
  int16_t port;
  std::string ipAddress;

  _IPPort__isset __isset;

  void __set_port(const int16_t val);

  void __set_ipAddress(const std::string& val);

  bool operator == (const IPPort & rhs) const
  {
    if (!(port == rhs.port))
      return false;
    if (!(ipAddress == rhs.ipAddress))
      return false;
    return true;
  }
  bool operator != (const IPPort &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IPPort & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(IPPort &a, IPPort &b);

inline std::ostream& operator<<(std::ostream& out, const IPPort& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _NodeInfo__isset {
  _NodeInfo__isset() : ID(false), network_info(false) {}
  bool ID :1;
  bool network_info :1;
} _NodeInfo__isset;

class NodeInfo {
 public:

  NodeInfo(const NodeInfo&);
  NodeInfo& operator=(const NodeInfo&);
  NodeInfo() : ID(0) {
  }

  virtual ~NodeInfo() throw();
  int64_t ID;
  IPPort network_info;

  _NodeInfo__isset __isset;

  void __set_ID(const int64_t val);

  void __set_network_info(const IPPort& val);

  bool operator == (const NodeInfo & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(network_info == rhs.network_info))
      return false;
    return true;
  }
  bool operator != (const NodeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const NodeInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(NodeInfo &a, NodeInfo &b);

inline std::ostream& operator<<(std::ostream& out, const NodeInfo& obj)
{
  obj.printTo(out);
  return out;
}



#endif
