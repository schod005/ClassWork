/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "DHTNode_SupernodeInterface_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




IPPort::~IPPort() throw() {
}


void IPPort::__set_port(const int16_t val) {
  this->port = val;
}

void IPPort::__set_ipAddress(const std::string& val) {
  this->ipAddress = val;
}

uint32_t IPPort::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipAddress);
          this->__isset.ipAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IPPort::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("IPPort");

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ipAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(IPPort &a, IPPort &b) {
  using ::std::swap;
  swap(a.port, b.port);
  swap(a.ipAddress, b.ipAddress);
  swap(a.__isset, b.__isset);
}

IPPort::IPPort(const IPPort& other0) {
  port = other0.port;
  ipAddress = other0.ipAddress;
  __isset = other0.__isset;
}
IPPort& IPPort::operator=(const IPPort& other1) {
  port = other1.port;
  ipAddress = other1.ipAddress;
  __isset = other1.__isset;
  return *this;
}
void IPPort::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "IPPort(";
  out << "port=" << to_string(port);
  out << ", " << "ipAddress=" << to_string(ipAddress);
  out << ")";
}


NodeInfo::~NodeInfo() throw() {
}


void NodeInfo::__set_ID(const int64_t val) {
  this->ID = val;
}

void NodeInfo::__set_network_info(const IPPort& val) {
  this->network_info = val;
}

uint32_t NodeInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->ID);
          this->__isset.ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->network_info.read(iprot);
          this->__isset.network_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t NodeInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("NodeInfo");

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("network_info", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->network_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(NodeInfo &a, NodeInfo &b) {
  using ::std::swap;
  swap(a.ID, b.ID);
  swap(a.network_info, b.network_info);
  swap(a.__isset, b.__isset);
}

NodeInfo::NodeInfo(const NodeInfo& other2) {
  ID = other2.ID;
  network_info = other2.network_info;
  __isset = other2.__isset;
}
NodeInfo& NodeInfo::operator=(const NodeInfo& other3) {
  ID = other3.ID;
  network_info = other3.network_info;
  __isset = other3.__isset;
  return *this;
}
void NodeInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "NodeInfo(";
  out << "ID=" << to_string(ID);
  out << ", " << "network_info=" << to_string(network_info);
  out << ")";
}


