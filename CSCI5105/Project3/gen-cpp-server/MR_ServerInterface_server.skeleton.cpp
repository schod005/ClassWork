// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MR_ServerInterface.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class MR_ServerInterfaceHandler : virtual public MR_ServerInterfaceIf {
 public:
  MR_ServerInterfaceHandler() {
    // Your initialization goes here
  }

  int64_t Register(const std::string& ipAddress, const int16_t port) {
    // Your implementation goes here
    printf("Register\n");
  }

  void sendHeartbeat(const std::string& ipAddress, const int16_t port) {
    // Your implementation goes here
    printf("sendHeartbeat\n");
  }

  bool sendFilename(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t offset, const int64_t size) {
    // Your implementation goes here
    printf("sendFilename\n");
  }

  bool callback_merge(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t merge_task_number) {
    // Your implementation goes here
    printf("callback_merge\n");
  }

  void getSorted(std::string& _return, const std::string& input_filename) {
    // Your implementation goes here
    printf("getSorted\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MR_ServerInterfaceHandler> handler(new MR_ServerInterfaceHandler());
  shared_ptr<TProcessor> processor(new MR_ServerInterfaceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

