/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MR_ServerInterface_H
#define MR_ServerInterface_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "MR_ServerInterface_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MR_ServerInterfaceIf {
 public:
  virtual ~MR_ServerInterfaceIf() {}
  virtual int64_t Register(const std::string& ipAddress, const int16_t port) = 0;
  virtual void sendHeartbeat(const std::string& ipAddress, const int16_t port) = 0;
  virtual bool sendFilename(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t offset, const int64_t size) = 0;
  virtual bool callback_merge(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t merge_task_number) = 0;
  virtual void getSorted(std::string& _return, const std::string& input_filename) = 0;
};

class MR_ServerInterfaceIfFactory {
 public:
  typedef MR_ServerInterfaceIf Handler;

  virtual ~MR_ServerInterfaceIfFactory() {}

  virtual MR_ServerInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MR_ServerInterfaceIf* /* handler */) = 0;
};

class MR_ServerInterfaceIfSingletonFactory : virtual public MR_ServerInterfaceIfFactory {
 public:
  MR_ServerInterfaceIfSingletonFactory(const boost::shared_ptr<MR_ServerInterfaceIf>& iface) : iface_(iface) {}
  virtual ~MR_ServerInterfaceIfSingletonFactory() {}

  virtual MR_ServerInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MR_ServerInterfaceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MR_ServerInterfaceIf> iface_;
};

class MR_ServerInterfaceNull : virtual public MR_ServerInterfaceIf {
 public:
  virtual ~MR_ServerInterfaceNull() {}
  int64_t Register(const std::string& /* ipAddress */, const int16_t /* port */) {
    int64_t _return = 0;
    return _return;
  }
  void sendHeartbeat(const std::string& /* ipAddress */, const int16_t /* port */) {
    return;
  }
  bool sendFilename(const std::string& /* filename */, const std::string& /* ipAddress */, const int16_t /* port */, const int64_t /* offset */, const int64_t /* size */) {
    bool _return = false;
    return _return;
  }
  bool callback_merge(const std::string& /* filename */, const std::string& /* ipAddress */, const int16_t /* port */, const int64_t /* merge_task_number */) {
    bool _return = false;
    return _return;
  }
  void getSorted(std::string& /* _return */, const std::string& /* input_filename */) {
    return;
  }
};

typedef struct _MR_ServerInterface_Register_args__isset {
  _MR_ServerInterface_Register_args__isset() : ipAddress(false), port(false) {}
  bool ipAddress :1;
  bool port :1;
} _MR_ServerInterface_Register_args__isset;

class MR_ServerInterface_Register_args {
 public:

  MR_ServerInterface_Register_args(const MR_ServerInterface_Register_args&);
  MR_ServerInterface_Register_args& operator=(const MR_ServerInterface_Register_args&);
  MR_ServerInterface_Register_args() : ipAddress(), port(0) {
  }

  virtual ~MR_ServerInterface_Register_args() throw();
  std::string ipAddress;
  int16_t port;

  _MR_ServerInterface_Register_args__isset __isset;

  void __set_ipAddress(const std::string& val);

  void __set_port(const int16_t val);

  bool operator == (const MR_ServerInterface_Register_args & rhs) const
  {
    if (!(ipAddress == rhs.ipAddress))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_Register_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_Register_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MR_ServerInterface_Register_pargs {
 public:


  virtual ~MR_ServerInterface_Register_pargs() throw();
  const std::string* ipAddress;
  const int16_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MR_ServerInterface_Register_result__isset {
  _MR_ServerInterface_Register_result__isset() : success(false) {}
  bool success :1;
} _MR_ServerInterface_Register_result__isset;

class MR_ServerInterface_Register_result {
 public:

  MR_ServerInterface_Register_result(const MR_ServerInterface_Register_result&);
  MR_ServerInterface_Register_result& operator=(const MR_ServerInterface_Register_result&);
  MR_ServerInterface_Register_result() : success(0) {
  }

  virtual ~MR_ServerInterface_Register_result() throw();
  int64_t success;

  _MR_ServerInterface_Register_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const MR_ServerInterface_Register_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_Register_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_Register_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MR_ServerInterface_Register_presult__isset {
  _MR_ServerInterface_Register_presult__isset() : success(false) {}
  bool success :1;
} _MR_ServerInterface_Register_presult__isset;

class MR_ServerInterface_Register_presult {
 public:


  virtual ~MR_ServerInterface_Register_presult() throw();
  int64_t* success;

  _MR_ServerInterface_Register_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MR_ServerInterface_sendHeartbeat_args__isset {
  _MR_ServerInterface_sendHeartbeat_args__isset() : ipAddress(false), port(false) {}
  bool ipAddress :1;
  bool port :1;
} _MR_ServerInterface_sendHeartbeat_args__isset;

class MR_ServerInterface_sendHeartbeat_args {
 public:

  MR_ServerInterface_sendHeartbeat_args(const MR_ServerInterface_sendHeartbeat_args&);
  MR_ServerInterface_sendHeartbeat_args& operator=(const MR_ServerInterface_sendHeartbeat_args&);
  MR_ServerInterface_sendHeartbeat_args() : ipAddress(), port(0) {
  }

  virtual ~MR_ServerInterface_sendHeartbeat_args() throw();
  std::string ipAddress;
  int16_t port;

  _MR_ServerInterface_sendHeartbeat_args__isset __isset;

  void __set_ipAddress(const std::string& val);

  void __set_port(const int16_t val);

  bool operator == (const MR_ServerInterface_sendHeartbeat_args & rhs) const
  {
    if (!(ipAddress == rhs.ipAddress))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_sendHeartbeat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_sendHeartbeat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MR_ServerInterface_sendHeartbeat_pargs {
 public:


  virtual ~MR_ServerInterface_sendHeartbeat_pargs() throw();
  const std::string* ipAddress;
  const int16_t* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MR_ServerInterface_sendHeartbeat_result {
 public:

  MR_ServerInterface_sendHeartbeat_result(const MR_ServerInterface_sendHeartbeat_result&);
  MR_ServerInterface_sendHeartbeat_result& operator=(const MR_ServerInterface_sendHeartbeat_result&);
  MR_ServerInterface_sendHeartbeat_result() {
  }

  virtual ~MR_ServerInterface_sendHeartbeat_result() throw();

  bool operator == (const MR_ServerInterface_sendHeartbeat_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MR_ServerInterface_sendHeartbeat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_sendHeartbeat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MR_ServerInterface_sendHeartbeat_presult {
 public:


  virtual ~MR_ServerInterface_sendHeartbeat_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MR_ServerInterface_sendFilename_args__isset {
  _MR_ServerInterface_sendFilename_args__isset() : filename(false), ipAddress(false), port(false), offset(false), size(false) {}
  bool filename :1;
  bool ipAddress :1;
  bool port :1;
  bool offset :1;
  bool size :1;
} _MR_ServerInterface_sendFilename_args__isset;

class MR_ServerInterface_sendFilename_args {
 public:

  MR_ServerInterface_sendFilename_args(const MR_ServerInterface_sendFilename_args&);
  MR_ServerInterface_sendFilename_args& operator=(const MR_ServerInterface_sendFilename_args&);
  MR_ServerInterface_sendFilename_args() : filename(), ipAddress(), port(0), offset(0), size(0) {
  }

  virtual ~MR_ServerInterface_sendFilename_args() throw();
  std::string filename;
  std::string ipAddress;
  int16_t port;
  int64_t offset;
  int64_t size;

  _MR_ServerInterface_sendFilename_args__isset __isset;

  void __set_filename(const std::string& val);

  void __set_ipAddress(const std::string& val);

  void __set_port(const int16_t val);

  void __set_offset(const int64_t val);

  void __set_size(const int64_t val);

  bool operator == (const MR_ServerInterface_sendFilename_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(ipAddress == rhs.ipAddress))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_sendFilename_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_sendFilename_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MR_ServerInterface_sendFilename_pargs {
 public:


  virtual ~MR_ServerInterface_sendFilename_pargs() throw();
  const std::string* filename;
  const std::string* ipAddress;
  const int16_t* port;
  const int64_t* offset;
  const int64_t* size;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MR_ServerInterface_sendFilename_result__isset {
  _MR_ServerInterface_sendFilename_result__isset() : success(false) {}
  bool success :1;
} _MR_ServerInterface_sendFilename_result__isset;

class MR_ServerInterface_sendFilename_result {
 public:

  MR_ServerInterface_sendFilename_result(const MR_ServerInterface_sendFilename_result&);
  MR_ServerInterface_sendFilename_result& operator=(const MR_ServerInterface_sendFilename_result&);
  MR_ServerInterface_sendFilename_result() : success(0) {
  }

  virtual ~MR_ServerInterface_sendFilename_result() throw();
  bool success;

  _MR_ServerInterface_sendFilename_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MR_ServerInterface_sendFilename_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_sendFilename_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_sendFilename_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MR_ServerInterface_sendFilename_presult__isset {
  _MR_ServerInterface_sendFilename_presult__isset() : success(false) {}
  bool success :1;
} _MR_ServerInterface_sendFilename_presult__isset;

class MR_ServerInterface_sendFilename_presult {
 public:


  virtual ~MR_ServerInterface_sendFilename_presult() throw();
  bool* success;

  _MR_ServerInterface_sendFilename_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MR_ServerInterface_callback_merge_args__isset {
  _MR_ServerInterface_callback_merge_args__isset() : filename(false), ipAddress(false), port(false), merge_task_number(false) {}
  bool filename :1;
  bool ipAddress :1;
  bool port :1;
  bool merge_task_number :1;
} _MR_ServerInterface_callback_merge_args__isset;

class MR_ServerInterface_callback_merge_args {
 public:

  MR_ServerInterface_callback_merge_args(const MR_ServerInterface_callback_merge_args&);
  MR_ServerInterface_callback_merge_args& operator=(const MR_ServerInterface_callback_merge_args&);
  MR_ServerInterface_callback_merge_args() : filename(), ipAddress(), port(0), merge_task_number(0) {
  }

  virtual ~MR_ServerInterface_callback_merge_args() throw();
  std::string filename;
  std::string ipAddress;
  int16_t port;
  int64_t merge_task_number;

  _MR_ServerInterface_callback_merge_args__isset __isset;

  void __set_filename(const std::string& val);

  void __set_ipAddress(const std::string& val);

  void __set_port(const int16_t val);

  void __set_merge_task_number(const int64_t val);

  bool operator == (const MR_ServerInterface_callback_merge_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(ipAddress == rhs.ipAddress))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(merge_task_number == rhs.merge_task_number))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_callback_merge_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_callback_merge_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MR_ServerInterface_callback_merge_pargs {
 public:


  virtual ~MR_ServerInterface_callback_merge_pargs() throw();
  const std::string* filename;
  const std::string* ipAddress;
  const int16_t* port;
  const int64_t* merge_task_number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MR_ServerInterface_callback_merge_result__isset {
  _MR_ServerInterface_callback_merge_result__isset() : success(false) {}
  bool success :1;
} _MR_ServerInterface_callback_merge_result__isset;

class MR_ServerInterface_callback_merge_result {
 public:

  MR_ServerInterface_callback_merge_result(const MR_ServerInterface_callback_merge_result&);
  MR_ServerInterface_callback_merge_result& operator=(const MR_ServerInterface_callback_merge_result&);
  MR_ServerInterface_callback_merge_result() : success(0) {
  }

  virtual ~MR_ServerInterface_callback_merge_result() throw();
  bool success;

  _MR_ServerInterface_callback_merge_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const MR_ServerInterface_callback_merge_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_callback_merge_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_callback_merge_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MR_ServerInterface_callback_merge_presult__isset {
  _MR_ServerInterface_callback_merge_presult__isset() : success(false) {}
  bool success :1;
} _MR_ServerInterface_callback_merge_presult__isset;

class MR_ServerInterface_callback_merge_presult {
 public:


  virtual ~MR_ServerInterface_callback_merge_presult() throw();
  bool* success;

  _MR_ServerInterface_callback_merge_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MR_ServerInterface_getSorted_args__isset {
  _MR_ServerInterface_getSorted_args__isset() : input_filename(false) {}
  bool input_filename :1;
} _MR_ServerInterface_getSorted_args__isset;

class MR_ServerInterface_getSorted_args {
 public:

  MR_ServerInterface_getSorted_args(const MR_ServerInterface_getSorted_args&);
  MR_ServerInterface_getSorted_args& operator=(const MR_ServerInterface_getSorted_args&);
  MR_ServerInterface_getSorted_args() : input_filename() {
  }

  virtual ~MR_ServerInterface_getSorted_args() throw();
  std::string input_filename;

  _MR_ServerInterface_getSorted_args__isset __isset;

  void __set_input_filename(const std::string& val);

  bool operator == (const MR_ServerInterface_getSorted_args & rhs) const
  {
    if (!(input_filename == rhs.input_filename))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_getSorted_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_getSorted_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MR_ServerInterface_getSorted_pargs {
 public:


  virtual ~MR_ServerInterface_getSorted_pargs() throw();
  const std::string* input_filename;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MR_ServerInterface_getSorted_result__isset {
  _MR_ServerInterface_getSorted_result__isset() : success(false) {}
  bool success :1;
} _MR_ServerInterface_getSorted_result__isset;

class MR_ServerInterface_getSorted_result {
 public:

  MR_ServerInterface_getSorted_result(const MR_ServerInterface_getSorted_result&);
  MR_ServerInterface_getSorted_result& operator=(const MR_ServerInterface_getSorted_result&);
  MR_ServerInterface_getSorted_result() : success() {
  }

  virtual ~MR_ServerInterface_getSorted_result() throw();
  std::string success;

  _MR_ServerInterface_getSorted_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MR_ServerInterface_getSorted_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MR_ServerInterface_getSorted_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MR_ServerInterface_getSorted_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MR_ServerInterface_getSorted_presult__isset {
  _MR_ServerInterface_getSorted_presult__isset() : success(false) {}
  bool success :1;
} _MR_ServerInterface_getSorted_presult__isset;

class MR_ServerInterface_getSorted_presult {
 public:


  virtual ~MR_ServerInterface_getSorted_presult() throw();
  std::string* success;

  _MR_ServerInterface_getSorted_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MR_ServerInterfaceClient : virtual public MR_ServerInterfaceIf {
 public:
  MR_ServerInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MR_ServerInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t Register(const std::string& ipAddress, const int16_t port);
  void send_Register(const std::string& ipAddress, const int16_t port);
  int64_t recv_Register();
  void sendHeartbeat(const std::string& ipAddress, const int16_t port);
  void send_sendHeartbeat(const std::string& ipAddress, const int16_t port);
  void recv_sendHeartbeat();
  bool sendFilename(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t offset, const int64_t size);
  void send_sendFilename(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t offset, const int64_t size);
  bool recv_sendFilename();
  bool callback_merge(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t merge_task_number);
  void send_callback_merge(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t merge_task_number);
  bool recv_callback_merge();
  void getSorted(std::string& _return, const std::string& input_filename);
  void send_getSorted(const std::string& input_filename);
  void recv_getSorted(std::string& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MR_ServerInterfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MR_ServerInterfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MR_ServerInterfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Register(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendHeartbeat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendFilename(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_callback_merge(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSorted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MR_ServerInterfaceProcessor(boost::shared_ptr<MR_ServerInterfaceIf> iface) :
    iface_(iface) {
    processMap_["Register"] = &MR_ServerInterfaceProcessor::process_Register;
    processMap_["sendHeartbeat"] = &MR_ServerInterfaceProcessor::process_sendHeartbeat;
    processMap_["sendFilename"] = &MR_ServerInterfaceProcessor::process_sendFilename;
    processMap_["callback_merge"] = &MR_ServerInterfaceProcessor::process_callback_merge;
    processMap_["getSorted"] = &MR_ServerInterfaceProcessor::process_getSorted;
  }

  virtual ~MR_ServerInterfaceProcessor() {}
};

class MR_ServerInterfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MR_ServerInterfaceProcessorFactory(const ::boost::shared_ptr< MR_ServerInterfaceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MR_ServerInterfaceIfFactory > handlerFactory_;
};

class MR_ServerInterfaceMultiface : virtual public MR_ServerInterfaceIf {
 public:
  MR_ServerInterfaceMultiface(std::vector<boost::shared_ptr<MR_ServerInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MR_ServerInterfaceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MR_ServerInterfaceIf> > ifaces_;
  MR_ServerInterfaceMultiface() {}
  void add(boost::shared_ptr<MR_ServerInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t Register(const std::string& ipAddress, const int16_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Register(ipAddress, port);
    }
    return ifaces_[i]->Register(ipAddress, port);
  }

  void sendHeartbeat(const std::string& ipAddress, const int16_t port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendHeartbeat(ipAddress, port);
    }
    ifaces_[i]->sendHeartbeat(ipAddress, port);
  }

  bool sendFilename(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t offset, const int64_t size) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendFilename(filename, ipAddress, port, offset, size);
    }
    return ifaces_[i]->sendFilename(filename, ipAddress, port, offset, size);
  }

  bool callback_merge(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t merge_task_number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->callback_merge(filename, ipAddress, port, merge_task_number);
    }
    return ifaces_[i]->callback_merge(filename, ipAddress, port, merge_task_number);
  }

  void getSorted(std::string& _return, const std::string& input_filename) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSorted(_return, input_filename);
    }
    ifaces_[i]->getSorted(_return, input_filename);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MR_ServerInterfaceConcurrentClient : virtual public MR_ServerInterfaceIf {
 public:
  MR_ServerInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MR_ServerInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t Register(const std::string& ipAddress, const int16_t port);
  int32_t send_Register(const std::string& ipAddress, const int16_t port);
  int64_t recv_Register(const int32_t seqid);
  void sendHeartbeat(const std::string& ipAddress, const int16_t port);
  int32_t send_sendHeartbeat(const std::string& ipAddress, const int16_t port);
  void recv_sendHeartbeat(const int32_t seqid);
  bool sendFilename(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t offset, const int64_t size);
  int32_t send_sendFilename(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t offset, const int64_t size);
  bool recv_sendFilename(const int32_t seqid);
  bool callback_merge(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t merge_task_number);
  int32_t send_callback_merge(const std::string& filename, const std::string& ipAddress, const int16_t port, const int64_t merge_task_number);
  bool recv_callback_merge(const int32_t seqid);
  void getSorted(std::string& _return, const std::string& input_filename);
  int32_t send_getSorted(const std::string& input_filename);
  void recv_getSorted(std::string& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
