// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "MR_ComputeNodeInterface.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

class MR_ComputeNodeInterfaceHandler : virtual public MR_ComputeNodeInterfaceIf {
 public:
  MR_ComputeNodeInterfaceHandler() {
    // Your initialization goes here
  }

  void Sort(const std::string& filename, const int64_t offset, const int64_t size) {
    // Your implementation goes here
    printf("Sort\n");
  }

  void Merge(const std::vector<std::string> & sorted_inter_files, const int64_t task_number) {
    // Your implementation goes here
    printf("Merge\n");
  }

  void wakeup() {
    // Your implementation goes here
    printf("wakeup\n");
  }

  void pingable() {
    // Your implementation goes here
    printf("pingable\n");
  }

  void outputStats() {
    // Your implementation goes here
    printf("outputStats\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<MR_ComputeNodeInterfaceHandler> handler(new MR_ComputeNodeInterfaceHandler());
  shared_ptr<TProcessor> processor(new MR_ComputeNodeInterfaceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

