/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileServerInterface_TYPES_H
#define FileServerInterface_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class WriteFile;

class ReadFile;

class ServerInfo;

class FileInfo;

typedef struct _WriteFile__isset {
  _WriteFile__isset() : file(false), filename(false) {}
  bool file :1;
  bool filename :1;
} _WriteFile__isset;

class WriteFile {
 public:

  WriteFile(const WriteFile&);
  WriteFile& operator=(const WriteFile&);
  WriteFile() : file(), filename() {
  }

  virtual ~WriteFile() throw();
  std::string file;
  std::string filename;

  _WriteFile__isset __isset;

  void __set_file(const std::string& val);

  void __set_filename(const std::string& val);

  bool operator == (const WriteFile & rhs) const
  {
    if (!(file == rhs.file))
      return false;
    if (!(filename == rhs.filename))
      return false;
    return true;
  }
  bool operator != (const WriteFile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const WriteFile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(WriteFile &a, WriteFile &b);

inline std::ostream& operator<<(std::ostream& out, const WriteFile& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ReadFile__isset {
  _ReadFile__isset() : error(false), errorMessage(false), file(false), filename(false), version(false) {}
  bool error :1;
  bool errorMessage :1;
  bool file :1;
  bool filename :1;
  bool version :1;
} _ReadFile__isset;

class ReadFile {
 public:

  ReadFile(const ReadFile&);
  ReadFile& operator=(const ReadFile&);
  ReadFile() : error(0), errorMessage(), file(), filename(), version(0) {
  }

  virtual ~ReadFile() throw();
  bool error;
  std::string errorMessage;
  std::string file;
  std::string filename;
  int64_t version;

  _ReadFile__isset __isset;

  void __set_error(const bool val);

  void __set_errorMessage(const std::string& val);

  void __set_file(const std::string& val);

  void __set_filename(const std::string& val);

  void __set_version(const int64_t val);

  bool operator == (const ReadFile & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (!(errorMessage == rhs.errorMessage))
      return false;
    if (!(file == rhs.file))
      return false;
    if (!(filename == rhs.filename))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const ReadFile &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ReadFile & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ReadFile &a, ReadFile &b);

inline std::ostream& operator<<(std::ostream& out, const ReadFile& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _ServerInfo__isset {
  _ServerInfo__isset() : port(false), ipAddress(false) {}
  bool port :1;
  bool ipAddress :1;
} _ServerInfo__isset;

class ServerInfo {
 public:

  ServerInfo(const ServerInfo&);
  ServerInfo& operator=(const ServerInfo&);
  ServerInfo() : port(0), ipAddress() {
  }

  virtual ~ServerInfo() throw();
  int16_t port;
  std::string ipAddress;

  _ServerInfo__isset __isset;

  void __set_port(const int16_t val);

  void __set_ipAddress(const std::string& val);

  bool operator == (const ServerInfo & rhs) const
  {
    if (!(port == rhs.port))
      return false;
    if (!(ipAddress == rhs.ipAddress))
      return false;
    return true;
  }
  bool operator != (const ServerInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServerInfo &a, ServerInfo &b);

inline std::ostream& operator<<(std::ostream& out, const ServerInfo& obj)
{
  obj.printTo(out);
  return out;
}

typedef struct _FileInfo__isset {
  _FileInfo__isset() : filename(false), version(false) {}
  bool filename :1;
  bool version :1;
} _FileInfo__isset;

class FileInfo {
 public:

  FileInfo(const FileInfo&);
  FileInfo& operator=(const FileInfo&);
  FileInfo() : filename(), version(0) {
  }

  virtual ~FileInfo() throw();
  std::string filename;
  int64_t version;

  _FileInfo__isset __isset;

  void __set_filename(const std::string& val);

  void __set_version(const int64_t val);

  bool operator == (const FileInfo & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const FileInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FileInfo &a, FileInfo &b);

inline std::ostream& operator<<(std::ostream& out, const FileInfo& obj)
{
  obj.printTo(out);
  return out;
}



#endif
