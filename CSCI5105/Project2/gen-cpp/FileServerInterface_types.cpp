/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "FileServerInterface_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




WriteFile::~WriteFile() throw() {
}


void WriteFile::__set_file(const std::string& val) {
  this->file = val;
}

void WriteFile::__set_filename(const std::string& val) {
  this->filename = val;
}

uint32_t WriteFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->file);
          this->__isset.file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          this->__isset.filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t WriteFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("WriteFile");

  xfer += oprot->writeFieldBegin("file", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->file);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->filename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(WriteFile &a, WriteFile &b) {
  using ::std::swap;
  swap(a.file, b.file);
  swap(a.filename, b.filename);
  swap(a.__isset, b.__isset);
}

WriteFile::WriteFile(const WriteFile& other0) {
  file = other0.file;
  filename = other0.filename;
  __isset = other0.__isset;
}
WriteFile& WriteFile::operator=(const WriteFile& other1) {
  file = other1.file;
  filename = other1.filename;
  __isset = other1.__isset;
  return *this;
}
void WriteFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "WriteFile(";
  out << "file=" << to_string(file);
  out << ", " << "filename=" << to_string(filename);
  out << ")";
}


ReadFile::~ReadFile() throw() {
}


void ReadFile::__set_error(const bool val) {
  this->error = val;
}

void ReadFile::__set_errorMessage(const std::string& val) {
  this->errorMessage = val;
}

void ReadFile::__set_file(const std::string& val) {
  this->file = val;
}

void ReadFile::__set_filename(const std::string& val) {
  this->filename = val;
}

void ReadFile::__set_version(const int64_t val) {
  this->version = val;
}

uint32_t ReadFile::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->error);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->errorMessage);
          this->__isset.errorMessage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->file);
          this->__isset.file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          this->__isset.filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ReadFile::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ReadFile");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->error);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("errorMessage", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->errorMessage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("file", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->file);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->filename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ReadFile &a, ReadFile &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.errorMessage, b.errorMessage);
  swap(a.file, b.file);
  swap(a.filename, b.filename);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

ReadFile::ReadFile(const ReadFile& other2) {
  error = other2.error;
  errorMessage = other2.errorMessage;
  file = other2.file;
  filename = other2.filename;
  version = other2.version;
  __isset = other2.__isset;
}
ReadFile& ReadFile::operator=(const ReadFile& other3) {
  error = other3.error;
  errorMessage = other3.errorMessage;
  file = other3.file;
  filename = other3.filename;
  version = other3.version;
  __isset = other3.__isset;
  return *this;
}
void ReadFile::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ReadFile(";
  out << "error=" << to_string(error);
  out << ", " << "errorMessage=" << to_string(errorMessage);
  out << ", " << "file=" << to_string(file);
  out << ", " << "filename=" << to_string(filename);
  out << ", " << "version=" << to_string(version);
  out << ")";
}


ServerInfo::~ServerInfo() throw() {
}


void ServerInfo::__set_port(const int16_t val) {
  this->port = val;
}

void ServerInfo::__set_ipAddress(const std::string& val) {
  this->ipAddress = val;
}

uint32_t ServerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ipAddress);
          this->__isset.ipAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServerInfo");

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ipAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ipAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServerInfo &a, ServerInfo &b) {
  using ::std::swap;
  swap(a.port, b.port);
  swap(a.ipAddress, b.ipAddress);
  swap(a.__isset, b.__isset);
}

ServerInfo::ServerInfo(const ServerInfo& other4) {
  port = other4.port;
  ipAddress = other4.ipAddress;
  __isset = other4.__isset;
}
ServerInfo& ServerInfo::operator=(const ServerInfo& other5) {
  port = other5.port;
  ipAddress = other5.ipAddress;
  __isset = other5.__isset;
  return *this;
}
void ServerInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServerInfo(";
  out << "port=" << to_string(port);
  out << ", " << "ipAddress=" << to_string(ipAddress);
  out << ")";
}


FileInfo::~FileInfo() throw() {
}


void FileInfo::__set_filename(const std::string& val) {
  this->filename = val;
}

void FileInfo::__set_version(const int64_t val) {
  this->version = val;
}

uint32_t FileInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->filename);
          this->__isset.filename = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FileInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FileInfo");

  xfer += oprot->writeFieldBegin("filename", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->filename);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("version", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->version);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FileInfo &a, FileInfo &b) {
  using ::std::swap;
  swap(a.filename, b.filename);
  swap(a.version, b.version);
  swap(a.__isset, b.__isset);
}

FileInfo::FileInfo(const FileInfo& other6) {
  filename = other6.filename;
  version = other6.version;
  __isset = other6.__isset;
}
FileInfo& FileInfo::operator=(const FileInfo& other7) {
  filename = other7.filename;
  version = other7.version;
  __isset = other7.__isset;
  return *this;
}
void FileInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FileInfo(";
  out << "filename=" << to_string(filename);
  out << ", " << "version=" << to_string(version);
  out << ")";
}


