/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DHTNode_NodeInterface_H
#define DHTNode_NodeInterface_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "DHTNode_NodeInterface_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class DHTNode_NodeInterfaceIf {
 public:
  virtual ~DHTNode_NodeInterfaceIf() {}
  virtual void Write(LogInfo& _return, const WriteFile& fileInfo, const int64_t flags) = 0;
  virtual void Read(ReadFile& _return, const std::string& filename, const int64_t flags) = 0;
  virtual void UpdateDHT(const std::vector<UpdateDHTInfo> & NodesList) = 0;
  virtual void getInfo(myInfo& _return) = 0;
};

class DHTNode_NodeInterfaceIfFactory {
 public:
  typedef DHTNode_NodeInterfaceIf Handler;

  virtual ~DHTNode_NodeInterfaceIfFactory() {}

  virtual DHTNode_NodeInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DHTNode_NodeInterfaceIf* /* handler */) = 0;
};

class DHTNode_NodeInterfaceIfSingletonFactory : virtual public DHTNode_NodeInterfaceIfFactory {
 public:
  DHTNode_NodeInterfaceIfSingletonFactory(const boost::shared_ptr<DHTNode_NodeInterfaceIf>& iface) : iface_(iface) {}
  virtual ~DHTNode_NodeInterfaceIfSingletonFactory() {}

  virtual DHTNode_NodeInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DHTNode_NodeInterfaceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DHTNode_NodeInterfaceIf> iface_;
};

class DHTNode_NodeInterfaceNull : virtual public DHTNode_NodeInterfaceIf {
 public:
  virtual ~DHTNode_NodeInterfaceNull() {}
  void Write(LogInfo& /* _return */, const WriteFile& /* fileInfo */, const int64_t /* flags */) {
    return;
  }
  void Read(ReadFile& /* _return */, const std::string& /* filename */, const int64_t /* flags */) {
    return;
  }
  void UpdateDHT(const std::vector<UpdateDHTInfo> & /* NodesList */) {
    return;
  }
  void getInfo(myInfo& /* _return */) {
    return;
  }
};

typedef struct _DHTNode_NodeInterface_Write_args__isset {
  _DHTNode_NodeInterface_Write_args__isset() : fileInfo(false), flags(false) {}
  bool fileInfo :1;
  bool flags :1;
} _DHTNode_NodeInterface_Write_args__isset;

class DHTNode_NodeInterface_Write_args {
 public:

  DHTNode_NodeInterface_Write_args(const DHTNode_NodeInterface_Write_args&);
  DHTNode_NodeInterface_Write_args& operator=(const DHTNode_NodeInterface_Write_args&);
  DHTNode_NodeInterface_Write_args() : flags(0) {
  }

  virtual ~DHTNode_NodeInterface_Write_args() throw();
  WriteFile fileInfo;
  int64_t flags;

  _DHTNode_NodeInterface_Write_args__isset __isset;

  void __set_fileInfo(const WriteFile& val);

  void __set_flags(const int64_t val);

  bool operator == (const DHTNode_NodeInterface_Write_args & rhs) const
  {
    if (!(fileInfo == rhs.fileInfo))
      return false;
    if (!(flags == rhs.flags))
      return false;
    return true;
  }
  bool operator != (const DHTNode_NodeInterface_Write_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_NodeInterface_Write_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_NodeInterface_Write_pargs {
 public:


  virtual ~DHTNode_NodeInterface_Write_pargs() throw();
  const WriteFile* fileInfo;
  const int64_t* flags;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_NodeInterface_Write_result__isset {
  _DHTNode_NodeInterface_Write_result__isset() : success(false) {}
  bool success :1;
} _DHTNode_NodeInterface_Write_result__isset;

class DHTNode_NodeInterface_Write_result {
 public:

  DHTNode_NodeInterface_Write_result(const DHTNode_NodeInterface_Write_result&);
  DHTNode_NodeInterface_Write_result& operator=(const DHTNode_NodeInterface_Write_result&);
  DHTNode_NodeInterface_Write_result() {
  }

  virtual ~DHTNode_NodeInterface_Write_result() throw();
  LogInfo success;

  _DHTNode_NodeInterface_Write_result__isset __isset;

  void __set_success(const LogInfo& val);

  bool operator == (const DHTNode_NodeInterface_Write_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DHTNode_NodeInterface_Write_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_NodeInterface_Write_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_NodeInterface_Write_presult__isset {
  _DHTNode_NodeInterface_Write_presult__isset() : success(false) {}
  bool success :1;
} _DHTNode_NodeInterface_Write_presult__isset;

class DHTNode_NodeInterface_Write_presult {
 public:


  virtual ~DHTNode_NodeInterface_Write_presult() throw();
  LogInfo* success;

  _DHTNode_NodeInterface_Write_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DHTNode_NodeInterface_Read_args__isset {
  _DHTNode_NodeInterface_Read_args__isset() : filename(false), flags(false) {}
  bool filename :1;
  bool flags :1;
} _DHTNode_NodeInterface_Read_args__isset;

class DHTNode_NodeInterface_Read_args {
 public:

  DHTNode_NodeInterface_Read_args(const DHTNode_NodeInterface_Read_args&);
  DHTNode_NodeInterface_Read_args& operator=(const DHTNode_NodeInterface_Read_args&);
  DHTNode_NodeInterface_Read_args() : filename(), flags(0) {
  }

  virtual ~DHTNode_NodeInterface_Read_args() throw();
  std::string filename;
  int64_t flags;

  _DHTNode_NodeInterface_Read_args__isset __isset;

  void __set_filename(const std::string& val);

  void __set_flags(const int64_t val);

  bool operator == (const DHTNode_NodeInterface_Read_args & rhs) const
  {
    if (!(filename == rhs.filename))
      return false;
    if (!(flags == rhs.flags))
      return false;
    return true;
  }
  bool operator != (const DHTNode_NodeInterface_Read_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_NodeInterface_Read_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_NodeInterface_Read_pargs {
 public:


  virtual ~DHTNode_NodeInterface_Read_pargs() throw();
  const std::string* filename;
  const int64_t* flags;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_NodeInterface_Read_result__isset {
  _DHTNode_NodeInterface_Read_result__isset() : success(false) {}
  bool success :1;
} _DHTNode_NodeInterface_Read_result__isset;

class DHTNode_NodeInterface_Read_result {
 public:

  DHTNode_NodeInterface_Read_result(const DHTNode_NodeInterface_Read_result&);
  DHTNode_NodeInterface_Read_result& operator=(const DHTNode_NodeInterface_Read_result&);
  DHTNode_NodeInterface_Read_result() {
  }

  virtual ~DHTNode_NodeInterface_Read_result() throw();
  ReadFile success;

  _DHTNode_NodeInterface_Read_result__isset __isset;

  void __set_success(const ReadFile& val);

  bool operator == (const DHTNode_NodeInterface_Read_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DHTNode_NodeInterface_Read_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_NodeInterface_Read_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_NodeInterface_Read_presult__isset {
  _DHTNode_NodeInterface_Read_presult__isset() : success(false) {}
  bool success :1;
} _DHTNode_NodeInterface_Read_presult__isset;

class DHTNode_NodeInterface_Read_presult {
 public:


  virtual ~DHTNode_NodeInterface_Read_presult() throw();
  ReadFile* success;

  _DHTNode_NodeInterface_Read_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DHTNode_NodeInterface_UpdateDHT_args__isset {
  _DHTNode_NodeInterface_UpdateDHT_args__isset() : NodesList(false) {}
  bool NodesList :1;
} _DHTNode_NodeInterface_UpdateDHT_args__isset;

class DHTNode_NodeInterface_UpdateDHT_args {
 public:

  DHTNode_NodeInterface_UpdateDHT_args(const DHTNode_NodeInterface_UpdateDHT_args&);
  DHTNode_NodeInterface_UpdateDHT_args& operator=(const DHTNode_NodeInterface_UpdateDHT_args&);
  DHTNode_NodeInterface_UpdateDHT_args() {
  }

  virtual ~DHTNode_NodeInterface_UpdateDHT_args() throw();
  std::vector<UpdateDHTInfo>  NodesList;

  _DHTNode_NodeInterface_UpdateDHT_args__isset __isset;

  void __set_NodesList(const std::vector<UpdateDHTInfo> & val);

  bool operator == (const DHTNode_NodeInterface_UpdateDHT_args & rhs) const
  {
    if (!(NodesList == rhs.NodesList))
      return false;
    return true;
  }
  bool operator != (const DHTNode_NodeInterface_UpdateDHT_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_NodeInterface_UpdateDHT_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_NodeInterface_UpdateDHT_pargs {
 public:


  virtual ~DHTNode_NodeInterface_UpdateDHT_pargs() throw();
  const std::vector<UpdateDHTInfo> * NodesList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_NodeInterface_UpdateDHT_result {
 public:

  DHTNode_NodeInterface_UpdateDHT_result(const DHTNode_NodeInterface_UpdateDHT_result&);
  DHTNode_NodeInterface_UpdateDHT_result& operator=(const DHTNode_NodeInterface_UpdateDHT_result&);
  DHTNode_NodeInterface_UpdateDHT_result() {
  }

  virtual ~DHTNode_NodeInterface_UpdateDHT_result() throw();

  bool operator == (const DHTNode_NodeInterface_UpdateDHT_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DHTNode_NodeInterface_UpdateDHT_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_NodeInterface_UpdateDHT_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_NodeInterface_UpdateDHT_presult {
 public:


  virtual ~DHTNode_NodeInterface_UpdateDHT_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class DHTNode_NodeInterface_getInfo_args {
 public:

  DHTNode_NodeInterface_getInfo_args(const DHTNode_NodeInterface_getInfo_args&);
  DHTNode_NodeInterface_getInfo_args& operator=(const DHTNode_NodeInterface_getInfo_args&);
  DHTNode_NodeInterface_getInfo_args() {
  }

  virtual ~DHTNode_NodeInterface_getInfo_args() throw();

  bool operator == (const DHTNode_NodeInterface_getInfo_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const DHTNode_NodeInterface_getInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_NodeInterface_getInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DHTNode_NodeInterface_getInfo_pargs {
 public:


  virtual ~DHTNode_NodeInterface_getInfo_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_NodeInterface_getInfo_result__isset {
  _DHTNode_NodeInterface_getInfo_result__isset() : success(false) {}
  bool success :1;
} _DHTNode_NodeInterface_getInfo_result__isset;

class DHTNode_NodeInterface_getInfo_result {
 public:

  DHTNode_NodeInterface_getInfo_result(const DHTNode_NodeInterface_getInfo_result&);
  DHTNode_NodeInterface_getInfo_result& operator=(const DHTNode_NodeInterface_getInfo_result&);
  DHTNode_NodeInterface_getInfo_result() {
  }

  virtual ~DHTNode_NodeInterface_getInfo_result() throw();
  myInfo success;

  _DHTNode_NodeInterface_getInfo_result__isset __isset;

  void __set_success(const myInfo& val);

  bool operator == (const DHTNode_NodeInterface_getInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DHTNode_NodeInterface_getInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DHTNode_NodeInterface_getInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DHTNode_NodeInterface_getInfo_presult__isset {
  _DHTNode_NodeInterface_getInfo_presult__isset() : success(false) {}
  bool success :1;
} _DHTNode_NodeInterface_getInfo_presult__isset;

class DHTNode_NodeInterface_getInfo_presult {
 public:


  virtual ~DHTNode_NodeInterface_getInfo_presult() throw();
  myInfo* success;

  _DHTNode_NodeInterface_getInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DHTNode_NodeInterfaceClient : virtual public DHTNode_NodeInterfaceIf {
 public:
  DHTNode_NodeInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DHTNode_NodeInterfaceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Write(LogInfo& _return, const WriteFile& fileInfo, const int64_t flags);
  void send_Write(const WriteFile& fileInfo, const int64_t flags);
  void recv_Write(LogInfo& _return);
  void Read(ReadFile& _return, const std::string& filename, const int64_t flags);
  void send_Read(const std::string& filename, const int64_t flags);
  void recv_Read(ReadFile& _return);
  void UpdateDHT(const std::vector<UpdateDHTInfo> & NodesList);
  void send_UpdateDHT(const std::vector<UpdateDHTInfo> & NodesList);
  void recv_UpdateDHT();
  void getInfo(myInfo& _return);
  void send_getInfo();
  void recv_getInfo(myInfo& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DHTNode_NodeInterfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DHTNode_NodeInterfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DHTNode_NodeInterfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Write(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Read(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_UpdateDHT(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DHTNode_NodeInterfaceProcessor(boost::shared_ptr<DHTNode_NodeInterfaceIf> iface) :
    iface_(iface) {
    processMap_["Write"] = &DHTNode_NodeInterfaceProcessor::process_Write;
    processMap_["Read"] = &DHTNode_NodeInterfaceProcessor::process_Read;
    processMap_["UpdateDHT"] = &DHTNode_NodeInterfaceProcessor::process_UpdateDHT;
    processMap_["getInfo"] = &DHTNode_NodeInterfaceProcessor::process_getInfo;
  }

  virtual ~DHTNode_NodeInterfaceProcessor() {}
};

class DHTNode_NodeInterfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DHTNode_NodeInterfaceProcessorFactory(const ::boost::shared_ptr< DHTNode_NodeInterfaceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DHTNode_NodeInterfaceIfFactory > handlerFactory_;
};

class DHTNode_NodeInterfaceMultiface : virtual public DHTNode_NodeInterfaceIf {
 public:
  DHTNode_NodeInterfaceMultiface(std::vector<boost::shared_ptr<DHTNode_NodeInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DHTNode_NodeInterfaceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DHTNode_NodeInterfaceIf> > ifaces_;
  DHTNode_NodeInterfaceMultiface() {}
  void add(boost::shared_ptr<DHTNode_NodeInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Write(LogInfo& _return, const WriteFile& fileInfo, const int64_t flags) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Write(_return, fileInfo, flags);
    }
    ifaces_[i]->Write(_return, fileInfo, flags);
    return;
  }

  void Read(ReadFile& _return, const std::string& filename, const int64_t flags) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Read(_return, filename, flags);
    }
    ifaces_[i]->Read(_return, filename, flags);
    return;
  }

  void UpdateDHT(const std::vector<UpdateDHTInfo> & NodesList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->UpdateDHT(NodesList);
    }
    ifaces_[i]->UpdateDHT(NodesList);
  }

  void getInfo(myInfo& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getInfo(_return);
    }
    ifaces_[i]->getInfo(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class DHTNode_NodeInterfaceConcurrentClient : virtual public DHTNode_NodeInterfaceIf {
 public:
  DHTNode_NodeInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  DHTNode_NodeInterfaceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Write(LogInfo& _return, const WriteFile& fileInfo, const int64_t flags);
  int32_t send_Write(const WriteFile& fileInfo, const int64_t flags);
  void recv_Write(LogInfo& _return, const int32_t seqid);
  void Read(ReadFile& _return, const std::string& filename, const int64_t flags);
  int32_t send_Read(const std::string& filename, const int64_t flags);
  void recv_Read(ReadFile& _return, const int32_t seqid);
  void UpdateDHT(const std::vector<UpdateDHTInfo> & NodesList);
  int32_t send_UpdateDHT(const std::vector<UpdateDHTInfo> & NodesList);
  void recv_UpdateDHT(const int32_t seqid);
  void getInfo(myInfo& _return);
  int32_t send_getInfo();
  void recv_getInfo(myInfo& _return, const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
